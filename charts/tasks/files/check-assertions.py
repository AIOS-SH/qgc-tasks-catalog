#!/usr/bin/python3

from os.path import exists
from re import match

import argparse
import logging


parser = argparse.ArgumentParser()
parser.add_argument("-r", "--results", help="Results dir input (generated by xunit-parser)")
parser.add_argument("-a", "--assertion", help="assertion to check", nargs='+', default=["errors=0"])
parser.add_argument("-l", "--log", help="log level", default="INFO")
args = parser.parse_args()

# set logging level using log argument
logging.basicConfig(level=getattr(logging, args.log.upper()))

results = dict(
    tests=None,
    defects=None,
    errors=None,
    failures=None,
    skipped=None,
    disabled=None
)

logging.info(f"Loading results directory {args.results}")
for k in results.keys():
    filename = f"{args.results}/{k}"
    logging.debug(f"Checking {filename} content")
    if not exists(filename):
        continue
    with open(filename, 'r') as content_file:
        results[k] = int(content_file.read())

if results["errors"] or results["failures"]:
    results["defects"] = (results["errors"] or 0) + (results["failures"] or 0)

logging.debug("tests count > 0?")
assert results["tests"] > 0, "No test detected. Exiting"

total_test: int = results["tests"]

for assertion in args.assertion:
    assertion = assertion.strip()
    # If single value, consider it as percent and convert it to correct assertion
    # 40.0 = errors<=60%, 100.0 = errors<=0%
    if match("^\\d+\\.?\\d*", assertion):
        old_assertion = assertion
        raw_value = 100.0 - float(assertion)
        assertion = f"defects<={raw_value}%"
        logging.debug(f"Converting assertion old assertion: {old_assertion} to: {assertion}")

    logging.info(f"Checking following assertion: {assertion}")
    parsed_assertion = match(
        "^\\s*(?P<kind>tests|defects|errors|failures|skipped|disabled)\\s*" +
        "(?P<test>(=|<=?|>=?|!=))\\s*(?P<value>[\\d\\.]+)\\s*(?P<percent>%?)$",
        assertion
    )
    if parsed_assertion is None:
        raise Exception(f"Fail to parse following assertion: `{assertion}`")

    # retrieve values and do computation if percent value
    values = parsed_assertion.groupdict()
    kind: str = values["kind"]

    test_result: int = 0
    if results[kind] is not None:
        test_result = int(results[kind])

    if values.get("percent"):
        raw_value = float(values["value"])
        assertion_value = int((float(raw_value * total_test) / 100.0) + 0.5)
        logging.debug(f"Converting percent value ({values['value']}%) to absolute value (={assertion_value})")
    else:
        assertion_value: int = int(values["value"])

    logging.debug(f"Assertion value = {assertion_value}, {kind} count = {test_result}")

    # Do the test
    test_operator = values.get("test", None)
    check = None
    if test_operator == "=":
        logging.debug("Check with equal (=) assertion")
        check = (test_result == assertion_value)
    elif test_operator == "<":
        logging.debug("Check with less than (<) assertion")
        check = (test_result < assertion_value)
    elif test_operator == "<=":
        logging.debug("Check with less than or equal (<=) assertion")
        check = (test_result <= assertion_value)
    elif test_operator == ">":
        logging.debug("Check with greater than (>) assertion")
        check = (test_result > assertion_value)
    elif test_operator == ">=":
        logging.debug("Check with greater than or equal (>=) assertion")
        check = (test_result >= assertion_value)
    elif test_operator == "!=" or test_operator == "<>":
        logging.debug("Check with is not (!=) assertion")
        check = (test_result != assertion_value)
    assert check, f"Check fail with the following assertion: {assertion}"
